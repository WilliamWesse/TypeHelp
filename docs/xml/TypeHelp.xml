<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TypeHelp</name>
    </assembly>
    <members>
        <member name="T:TypeHelp.Cmp">
            <summary>
            Specifies standard <c>LSS</c>, <c>EQU</c> and <c>GTR</c> comparison values (all positive) in addition to error values (all negative) such as <c>NAN</c> and <c>OVF</c> (overflow). These are used by <see cref="M:TypeHelp.TypeParser.Compare(System.Int32,System.Int32)"/> and similar methods for other <c>TypeParser</c> supported types.
            </summary>
        </member>
        <member name="T:TypeHelp.RTProp">
            <summary>
            The r t prop.
            </summary>
        </member>
        <member name="T:TypeHelp.TIP">
            <summary>
            The TypeInfo Property (TIP) enumeration defines the <see cref="T:TypeHelp.TypeInfo"/> Property values.
            </summary>
        </member>
        <member name="F:TypeHelp.TIP.HasValue">
            <summary>
            Indicates the value provided to a <see cref="T:TypeHelp.TypeInfo"/> constructor is not null.
            </summary>
        </member>
        <member name="F:TypeHelp.TIP.IsEmpty">
            <summary>
            Indicates the value provided to a <see cref="T:TypeHelp.TypeInfo"/> constructor is null.
            </summary>
        </member>
        <member name="F:TypeHelp.TIP.IsEnum">
            <summary>
            Indicates the value is or type indicates an enumeration.
            </summary>
        </member>
        <member name="F:TypeHelp.TIP.IsInteger">
            <summary>
            Indicates the value is or type indicates a signed integer, i.e., one of the following data types:
            <code>
             System.SByte  System.Int16  System.Int32  System.Int64
             System.Numerics.BigInteger
            </code>
            </summary>
        </member>
        <member name="F:TypeHelp.TIP.IsNatural">
            <summary>
            Indicates the value is or type indicates a natural number, i.e., an unsigned integer, one of the following data types:
            <code>
             System.Byte  System.UInt16  System.UInt32  System.UInt64
            </code>
            </summary>
        </member>
        <member name="F:TypeHelp.TIP.IsNumber">
            <summary>
            Indicates the value or type is a number, i.e., one of the following data types:
            <code>
             System.Byte    System.Decimal  System.Double
             System.Int16   System.Int32    System.Int64
             System.SByte   System.Single
             System.UInt16  System.UInt32   System.UInt64
             System.Numerics.BigInteger
             System.Numerics.Complex
            </code>
            </summary>
        </member>
        <member name="F:TypeHelp.TIP.IsObject">
            <summary>
            Indicates the value or type is a <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="F:TypeHelp.TIP.IsPrecision">
            <summary>
            Indicates the value or type is floating-point, i.e., one of the following data types:
            <code>
             System.Decimal  System.Double
             System.Single   System.Numerics.Complex
            </code>
            </summary>
        </member>
        <member name="F:TypeHelp.TIP.IsString">
            <summary>
            IsString
            <para>Indicates the value or type is a <see cref="T:System.String"/>.
            </para>
            </summary>
        </member>
        <member name="F:TypeHelp.TIP.IsType">
            <summary>
            IsType
            <para>Indicates the <see cref="T:System.Type"/> Property is a
            <see cref="T:System.Type"/>.</para>
            </summary>
        </member>
        <member name="F:TypeHelp.TIP.IsValid">
            <summary>
            Indicates the status of the argument (by type) provided to the constructor:
            <list type="table">
            <listheader><term>Type</term><description>Status</description></listheader>
            <item><term><c>System.Object</c></term><description>value is not null.</description></item>
            <item><term><c>System.String</c></term><description>value is not null.</description></item>
            <item><term><c>System.TypeCode</c></term><description>value is defined.</description></item>
            <item><term><c>TypeHelp.TypeCoex</c></term><description>value is defined.</description></item>
            </list>
            </summary>
        </member>
        <member name="T:TypeHelp.TypeInfo">
            <summary>
            Contains information about a data type or value defined by either the <see cref="T:System.TypeCode"/> or <seealso cref="F:TypeHelp.TypeInfo.TypeCoex"/> enumeration.
            </summary>
        </member>
        <member name="M:TypeHelp.TypeInfo.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TypeHelp.TypeInfo"/> class using a <see cref="T:System.Type"/> or <see cref="T:System.ValueType"/> object.
            </summary>
            <param name="obj">The object to deconstruct. This may be any <see cref="T:System.Type"/> or <see cref="T:System.ValueType"/> defined by the <see cref="T:System.TypeCode"/> and <seealso cref="T:TypeHelp.TypeCoex"/> enumerations.</param>
        </member>
        <member name="M:TypeHelp.TypeInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:TypeHelp.TypeInfo"/> class using a <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to deconstruct. This may be any type defined by the <see cref="T:System.TypeCode"/> and <seealso cref="T:TypeHelp.TypeCoex"/> enumerations.</param>
        </member>
        <member name="M:TypeHelp.TypeInfo.#ctor(System.TypeCode)">
            <summary>
            Initializes a new instance of the <see cref="T:TypeHelp.TypeInfo"/> class using a <see cref="T:System.TypeCode"/>.
            </summary>
            <param name="typeCode">A <see cref="T:System.TypeCode"/>
            enumeration value to deconstruct.</param>
        </member>
        <member name="M:TypeHelp.TypeInfo.#ctor(TypeHelp.TypeCoex)">
            <summary>
            Initializes a new instance of the <see cref="T:TypeHelp.TypeInfo"/> class using a <see cref="T:TypeHelp.TypeCoex"/>.
            </summary>
            <param name="typeCoex">A <see cref="T:TypeHelp.TypeCoex"/> enumeration value
            to deconstruct.</param>
        </member>
        <member name="M:TypeHelp.TypeInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TypeHelp.TypeInfo"/> class using a <see cref="T:System.String"/>.
            </summary>
            <param name="text">A <see cref="T:System.String"/>
            value to deconstruct.</param>
        </member>
        <member name="P:TypeHelp.TypeInfo.Item(TypeHelp.TIP)">
            <summary>
            Indexer [<see cref="T:TypeHelp.TIP"/>]
            <para>
            Gets the <see cref="T:System.Boolean"/> for the specified property.
            </para>
            </summary>
            <param name="prop">The <see cref="T:TypeHelp.TIP"/> property to obtain.</param>
            <returns>The <see cref="T:System.Boolean"/> value for the specified property.</returns>
        </member>
        <member name="P:TypeHelp.TypeInfo.CoexStat">
            <summary>
            CoexStat Property
            <para>TypeOf: <see cref="T:TypeHelp.TCF"/></para>
            Gets and sets the CoexStat value.
            </summary>
        </member>
        <member name="P:TypeHelp.TypeInfo.Elements">
            <summary>
            Elements
            <para>TypeOf: <see cref="T:System.Int32"/></para>
            The number of elements comprising the IsType or HasValue.
            </summary>
        </member>
        <member name="P:TypeHelp.TypeInfo.FullName">
            <summary>
            FullName
            <para>TypeOf: <see cref="T:System.String"/></para>
            The FullName of the <see cref="F:TypeHelp.TypeInfo.Type"/> Property,
            or "null" if the type is null.
            </summary>
        </member>
        <member name="P:TypeHelp.TypeInfo.HasValue">
            <summary>
            HasValue Property
            <para>TypeOf: <see cref="T:System.Boolean"/></para>
            The <see cref="F:TypeHelp.TIP.HasValue"/> value from this struct indexer.
            </summary>
        </member>
        <member name="P:TypeHelp.TypeInfo.IsEmpty">
            <summary>
            IsEmpty Property
            <para>TypeOf: <see cref="T:System.Boolean"/></para>
            The <see cref="F:TypeHelp.TIP.IsEmpty"/> value from this struct indexer,
            indicating the <seealso cref="F:TypeHelp.TypeInfo.Value"> Property
            </seealso> is null.
            </summary>
        </member>
        <member name="P:TypeHelp.TypeInfo.IsEnum">
            <summary>
            IsEnum Property
            <para>TypeOf: <see cref="T:System.Boolean"/></para>
            The <see cref="F:TypeHelp.TIP.IsEnum"/> value from this struct indexer,
            indicating the <seealso cref="F:TypeHelp.TypeInfo.Value"> Property
            </seealso> is an enumeration.
            </summary>
        </member>
        <member name="P:TypeHelp.TypeInfo.IsInteger">
            <summary>
            IsInteger Property
            <para>TypeOf: <see cref="T:System.Boolean"/></para>
            The <see cref="F:TypeHelp.TIP.IsInteger"/> value from this struct indexer,
            indicating the <seealso cref="F:TypeHelp.TypeInfo.Value"> Property
            </seealso> is an integer or
            <seealso cref="T:System.Numerics.BigInteger"/>.
            </summary>
        </member>
        <member name="P:TypeHelp.TypeInfo.IsNatural">
            <summary>
            IsNatural Property
            <para>TypeOf: <see cref="T:System.Boolean"/></para>
            The <see cref="F:TypeHelp.TIP.IsNatural"/> value from this struct indexer,
            indicating the <seealso cref="F:TypeHelp.TypeInfo.Value"> Property
            </seealso> is a natural number.
            </summary>
        </member>
        <member name="P:TypeHelp.TypeInfo.IsNumber">
            <summary>
            IsNumber Property
            <para>TypeOf: <see cref="T:System.Boolean"/></para>
            The <see cref="F:TypeHelp.TIP.IsNumber"/> value from this struct indexer,
            indicating the <seealso cref="F:TypeHelp.TypeInfo.Value"> Property
            </seealso> is an integer, natural,
            <seealso cref="T:System.Numerics.BigInteger"/> or
            floating point number.
            </summary>
        </member>
        <member name="P:TypeHelp.TypeInfo.IsObject">
            <summary>
            IsObject Property
            <para>TypeOf: <see cref="T:System.Boolean"/></para>
            The <see cref="F:TypeHelp.TIP.IsObject"/> value from this struct indexer,
            indicating the <seealso cref="F:TypeHelp.TypeInfo.Value"> Property
            </seealso> is a <seealso cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="P:TypeHelp.TypeInfo.IsPrecision">
            <summary>
            IsPrecision Property
            <para>TypeOf: <see cref="T:System.Boolean"/></para>
            The <see cref="F:TypeHelp.TIP.IsPrecision"/> value from this struct indexer,
            indicating the <seealso cref="F:TypeHelp.TypeInfo.Value"> Property
            </seealso> is a floating point number.
            </summary>
        </member>
        <member name="P:TypeHelp.TypeInfo.IsString">
            <summary>
            IsString Property
            <para>TypeOf: <see cref="T:System.Boolean"/></para>
            The <see cref="F:TypeHelp.TIP.IsString"/> value from this struct indexer,
            indicating the <seealso cref="F:TypeHelp.TypeInfo.Value"> Property
            </seealso> is a <seealso cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:TypeHelp.TypeInfo.IsType">
            <summary>
            IsType Property
            <para>TypeOf: <see cref="T:System.Boolean"/></para>
            The <see cref="F:TypeHelp.TIP.IsType"/> value from this struct indexer,
            indicating the <seealso cref="F:TypeHelp.TypeInfo.Value"> Property
            </seealso> is a <seealso cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:TypeHelp.TypeInfo.Length">
            <summary>
            Length
            <para>TypeOf: <see cref="T:System.Int32"/></para>
            The length of the value in bytes, or zero if the value is null.
            </summary>
        </member>
        <member name="P:TypeHelp.TypeInfo.LongSize">
            <summary>
            LongSize
            <para>TypeOf: <see cref="T:System.Int64"/></para>
            The size of the value in bytes, or zero if the value is null.
            <para>Note this value applies to <see cref="T:System.String"/>,
            <seealso cref="T:System.Numerics.BigInteger"/> and array or
            multi-part values.</para>
            </summary>
        </member>
        <member name="P:TypeHelp.TypeInfo.Name">
            <summary>
            Name
            <para>TypeOf: <see cref="T:System.String"/></para>
            The Name of the <see cref="F:TypeHelp.TypeInfo.Type"/> Property,
            or "null" if the type is null.
            </summary>
        </member>
        <member name="P:TypeHelp.TypeInfo.Size">
            <summary>
            Size
            <para>TypeOf: <see cref="T:System.Int32"/></para>
            The size of the value in bytes, or zero if the value is null.
            <para><see cref="P:TypeHelp.TypeInfo.LongSize"/> concerning array or
            multi-part values.</para>
            </summary>
        </member>
        <member name="F:TypeHelp.TypeInfo.CodeFlag">
            <summary>
            CodeFlag Field
            <para>TypeOf: <see cref="T:TypeHelp.TCF"/></para>
            </summary>
        </member>
        <member name="F:TypeHelp.TypeInfo.CoexFlag">
            <summary>
            CoexFlag Field
            <para>TypeOf: <see cref="T:TypeHelp.TCF"/></para>
            </summary>
        </member>
        <member name="F:TypeHelp.TypeInfo.Text">
            <summary>
            Text Field
            <para>TypeOf: <see cref="T:System.String"/></para>
            This will be <see cref="F:System.String.Empty"/>,
            a <seealso cref="T:System.String"/>, or <c>ToString()</c>
            against a <seealso cref="T:System.Object"/>
            provided to the <see cref="T:TypeHelp.TypeInfo"/> constructor.
            </summary>
        </member>
        <member name="F:TypeHelp.TypeInfo.Type">
            <summary>
            IsType Field
            <para>TypeOf: <see cref="T:System.Type"/> or null.</para>
            The <see cref="T:System.Type"/> of the <see cref="F:TypeHelp.TypeInfo.Value"/>,
            <seealso cref="F:TypeHelp.TypeInfo.TypeCode"/> Property
            or <seealso cref="F:TypeHelp.TypeInfo.TypeCode"/> Property
            </summary>
        </member>
        <member name="F:TypeHelp.TypeInfo.TypeCode">
            <summary>
            TypeCode Field
            <para>TypeOf: <see cref="T:System.TypeCode"/></para>
            The value provided to the <see cref="T:TypeHelp.TypeInfo"/> constructor,
            or from the <see cref="F:TypeHelp.TypeInfo.Value"/> Property.
            </summary>
        </member>
        <member name="F:TypeHelp.TypeInfo.TypeCoex">
            <summary>
            TypeCoex Field
            <para>TypeOf: <see cref="F:TypeHelp.TypeInfo.TypeCoex"/></para>
            The value provided to the <see cref="T:TypeHelp.TypeInfo"/> constructor,
            or from the <see cref="F:TypeHelp.TypeInfo.Value"/> Property.
            </summary>
        </member>
        <member name="F:TypeHelp.TypeInfo.Value">
            <summary>
            Value Field
            <para>TypeOf: <see cref="T:System.Object"/> or null.</para>
            The value provided to the <see cref="T:TypeHelp.TypeInfo"/> constructor.
            </summary>
        </member>
        <member name="T:TypeHelp.Nullity">
            <summary>
            Represents a nulled value. This class cannot be inherited.
            </summary>
        </member>
        <member name="F:TypeHelp.Nullity.Value">
            <summary>
            Represents the sole instance of the TypeHelp.Nullity class.
            </summary>
        </member>
        <member name="M:TypeHelp.Nullity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the System.Runtime.Serialization.ISerializable interface and returns the data needed to serialize the TypeHelp.Nullity object.
            </summary>
            <param name="info">A System.Runtime.Serialization.SerializationInfo object containing information required to serialize the TypeHelp.Nullity object.</param>
            <param name="context">A System.Runtime.Serialization.StreamingContext object containing the source and destination of the serialized stream associated with the TypeHelp.Nullity object.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <para>info is null.</para>
        </member>
        <member name="M:TypeHelp.Nullity.ToString">
            <summary>
            Returns an empty string (System.String.Empty).
            </summary>
            <returns>
            System.String.Empty
            </returns>
        </member>
        <member name="M:TypeHelp.Nullity.ToString(System.IFormatProvider)">
            <summary>
            Returns an empty string using the specified System.IFormatProvider.
            </summary>
            <param name="provider">The System.IFormatProvider to be used to format the return value. -or- null to obtain the format information from the current locale setting of the operating system.</param>
            <returns>
            System.String.Empty
            </returns>
        </member>
        <member name="M:TypeHelp.Nullity.GetTypeCode">
            <summary>
            Gets the System.TypeCode value for TypeHelp.Nullity.
            </summary>
            <returns>The System.TypeCode value for TypeHelp.Nullity, which is System.TypeCode.Object.</returns>
        </member>
        <member name="M:TypeHelp.Nullity.GetTypeCoex">
            <summary>
            Gets the System.TypeCoex value for TypeHelp.Nullity.
            </summary>
            <returns>
            The TypeHelp.TypeCoex value for TypeHelp.Nullity, which is TypeCoex.Nullity.
            </returns>
        </member>
        <member name="M:TypeHelp.Nullity.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>
            This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">An object that implements the System.IFormatProvider interface. (This parameter is not used; specify null.)</param>
            <returns>None. The return value for this member is not used.</returns>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:TypeHelp.Nullity.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>
            This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">An object that implements the System.IFormatProvider interface. (This parameter is not used; specify null.)</param>
            <returns>None. The return value for this member is not used.</returns>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:TypeHelp.Nullity.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">An object that implements the System.IFormatProvider interface. (This parameter is not used; specify null.)</param>
            <returns>None. The return value for this member is not used.</returns>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:TypeHelp.Nullity.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>
            This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">An object that implements the System.IFormatProvider interface. (This parameter is not used; specify null.)</param>
            <returns>None. The return value for this member is not used.</returns>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:TypeHelp.Nullity.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>
            This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">An object that implements the System.IFormatProvider interface. (This parameter is not used; specify null.)</param>
            <returns>None. The return value for this member is not used.</returns>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:TypeHelp.Nullity.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">An object that implements the System.IFormatProvider interface. (This parameter is not used; specify null.)</param>
            <returns>None. The return value for this member is not used.</returns>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:TypeHelp.Nullity.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>
            This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">An object that implements the System.IFormatProvider interface. (This parameter is not used; specify null.)</param>
            <returns>None. The return value for this member is not used.</returns>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:TypeHelp.Nullity.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">An object that implements the System.IFormatProvider interface. (This parameter is not used; specify null.)</param>
            <returns>None. The return value for this member is not used.</returns>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:TypeHelp.Nullity.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>
            This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">An object that implements the System.IFormatProvider interface. (This parameter is not used; specify null.)</param>
            <returns>None. The return value for this member is not used.</returns>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:TypeHelp.Nullity.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">An object that implements the System.IFormatProvider interface. (This parameter is not used; specify null.)</param>
            <returns>None. The return value for this member is not used.</returns>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:TypeHelp.Nullity.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary>
            This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">An object that implements the System.IFormatProvider interface. (This parameter is not used; specify null.)</param>
            <returns>None. The return value for this member is not used.</returns>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:TypeHelp.Nullity.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary>
            This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">An object that implements the System.IFormatProvider interface. (This parameter is not used; specify null.)</param>
            <returns>None. The return value for this member is not used.</returns>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:TypeHelp.Nullity.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary>
            This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">An object that implements the System.IFormatProvider interface. (This parameter is not used; specify null.)</param>
            <returns>None. The return value for this member is not used.</returns>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:TypeHelp.Nullity.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>
            This conversion is not supported. Attempting to make this conversion throws an <see cref="T:System.InvalidCastException"/>.
            </summary>
            <param name="provider">An object that implements the System.IFormatProvider interface. (This parameter is not used; specify null.)</param>
            <returns>None. The return value for this member is not used.</returns>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:TypeHelp.Nullity.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the current TypeHelp.Nullity object to the specified type.
            </summary>
            <param name="type">The type to convert the current TypeHelp.Nullity object to.</param>
            <param name="provider">An object that implements the System.IFormatProvider interface and is used to augment the conversion. If null is specified, format information is obtained from the current culture.</param>
            <returns>The boxed equivalent of the current TypeHelp.Nullity object, if that conversion is supported; otherwise, an exception is thrown and no value is returned.</returns>
            <exception cref="T:System.FormatException"></exception>
            <para>TypeHelp.Nullity.Value is not in a format for the conversionType recognized by the provider.</para>
            <exception cref="T:System.InvalidCastException"></exception>
            <para>This conversion is not supported for the TypeHelp.Nullity type.</para>
            <exception cref="T:System.ArgumentNullException"></exception>
            <para><paramref name="type"/> is null.</para>
        </member>
        <member name="M:TypeHelp.NullityConverter.System#Runtime#Serialization#IFormatterConverter#Convert(System.Object,System.Type)">
            <summary>
            Converts the specified value to a given <c>Type</c>.
            <para>The following conversions are not supported. Attempting to make any will result in throwing a System.InvalidCastException.</para>
            <code>
               ToBoolean, ToByte,   ToChar,   ToDateTime,
               ToDouble,  ToInt16,  ToInt32,  ToInt64,    ToSByte,
               ToSingle,  ToUInt16, ToUInt32, ToUInt64
            </code>
            </summary>
            <param name="value">An object that implements the System.IFormatProvider interface. (This parameteris not used; specify null.)</param>
            <param name="type">The type to convert the value to.</param>
            <returns>The converted object.</returns>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:TypeHelp.NullityConverter.ToString">
            <summary>
            Returns an empty string (System.String.Empty).
            </summary>
            <returns>
            System.String.Empty
            </returns>
        </member>
        <member name="M:TypeHelp.NullityConverter.ToString(System.Object)">
            <summary>
            Returns an empty string (System.String.Empty).
            </summary>
            <param name="value">The value to convert to a string.</param>
            <returns>
            System.String.Empty
            </returns>
        </member>
        <member name="M:TypeHelp.NullitySerializationHolder.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the System.Runtime.Serialization.ISerializable interface and returns the Data needed to serialize the TypeHelp.Nullity object.
            </summary>
            <param name="serializationInfo">A System.Runtime.Serialization.SerializationInfo object containing information required to serialize the TypeHelp.Nullity object.</param>
            <param name="context">A System.Runtime.Serialization.StreamingContext object containing the source and destination of the serialized stream associated with the TypeHelp.Nullity object.</param>
            <exception cref="T:System.ArgumentNullException"> serializationInfo is null.</exception>
            <para>serializationInfo is null.</para>
        </member>
        <member name="M:TypeHelp.NullitySerializationHolder.GetRealObject(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the real object.
            </summary>
            <param name="context">A System.Runtime.Serialization.StreamingContext object containing the source and destination of the serialized stream associated with the TypeHelp.Nullity object.</param>
            <returns>An object</returns>
        </member>
        <member name="M:TypeHelp.NullitySerializationHolder.GetStreamingContext">
            <summary>
            Gets the streaming context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TypeHelp.NullitySerializationHolder.LoadObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Loads the object data.
            </summary>
            <param name="serializationInfo">A System.Runtime.Serialization.SerializationInfo object containing information required to serialize the TypeHelp.Nullity object.</param>
            <param name="context">A System.Runtime.Serialization.StreamingContext object containing the source and destination of the serialized stream associated with the TypeHelp.Nullity object.</param>
        </member>
        <member name="T:TypeHelp.SliceOpts">
            <summary>
            Specifies flag options for <see cref="T:TypeHelp.Slice"/> class constructors to control instance byte access length, position, sign and error processing.
            <para>Constructor parameter array boundary violations in conjunction with the <c>StrictLength</c> and <c>StrictOffset</c> options MAY raise a <exception cref="T:System.TypeInitializationException"/> with an inner <exception cref="T:System.InvalidOperationException"/>.</para>
            </summary>
        </member>
        <member name="F:TypeHelp.SliceOpts.None">
            <summary>
            <b>Default</b>: No options. Offset MAY limit length (locked offset) and data is assumed to be in network byte order (NBO), a.k.a., big-endian.
            </summary>
        </member>
        <member name="F:TypeHelp.SliceOpts.LittleEndian">
            <summary>
            Extract the data with the first as least-significant byte (little-endian byte order).
            </summary>
        </member>
        <member name="F:TypeHelp.SliceOpts.LockedLength">
            <summary>
            Decrement the offset on length overruns; otherwise, truncate processing (locked offset).
            </summary>
        </member>
        <member name="F:TypeHelp.SliceOpts.LockUnsigned">
            <summary>
            Extract unsigned types from arrays having the hi-order bit set in the most significant byte.
            </summary>
        </member>
        <member name="F:TypeHelp.SliceOpts.StrictLength">
            <summary>
            If length is outside of array bounds, the <see cref="T:TypeHelp.Slice"/> constructor will fail as noted in <see cref="T:TypeHelp.SliceOpts"/>.
            </summary>
        </member>
        <member name="F:TypeHelp.SliceOpts.StrictOffset">
            <summary>
            If offset is outside of array bounds, the <see cref="T:TypeHelp.Slice"/> constructor will fail as noted in <see cref="T:TypeHelp.SliceOpts"/>.
            </summary>
        </member>
        <member name="T:TypeHelp.Slice">
            <summary>
            A class that will extract one of the following data types from an array of bytes:
            <code>
             System.Boolean   System.Byte    System.Char
             System.DateTime  System.DBNull  System.Decimal
             System.Double    System.Int16   System.Int32
             System.Int64     System.SByte   System.Single
             System.UInt16    System.UInt32  System.UInt64
             System.Numerics.BigInteger
             System.Numerics.Complex
             TypeHelp.Nullity&#160;
            </code>
            </summary>
            <remarks>Constructor parameter array boundary violations in conjunction with the <see cref="F:TypeHelp.SliceOpts.StrictLength"/> and <see cref="F:TypeHelp.SliceOpts.StrictOffset"/> options MAY raise a <exception cref="T:System.TypeInitializationException"/> with an inner <exception cref="T:System.InvalidOperationException"/>.</remarks>
        </member>
        <member name="M:TypeHelp.Slice.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Create a <c>Slice</c> using length, offset and the default options:
            <list type="bullet">
            <item><description><paramref name="data"/> is in Network Byte Order (NBO), a.k.a., big-endian.</description></item>
            <item><description><paramref name="offset"/> is locked, data MAY be truncated.</description></item>
            </list>
            </summary>
            <param name="data">An array of bytes.</param>
            <param name="length">The length of the value to extract.</param>
            <param name="offset">The position of the value.</param>
            <remarks>
            If the <see cref="F:TypeHelp.SliceOpts.StrictLength"/> flag is set and the <paramref name="length"/> parameter is out of bounds, or the <see cref="F:TypeHelp.SliceOpts.StrictOffset"/> flag is set and the <paramref name="offset"/> parameter is out of bounds, a <exception cref="T:System.TypeInitializationException"/> with an inner <exception cref="T:System.InvalidOperationException"/> will be thrown.
            </remarks>
        </member>
        <member name="M:TypeHelp.Slice.#ctor(System.Byte[],System.Int32,System.Int32,System.Nullable{TypeHelp.SliceOpts})">
            <summary>
            Create a <c>Slice</c> using length, offset and the selected <c>SliceOpts</c>.
            </summary>
            <param name="data">An array of bytes.</param>
            <param name="length">The length of the value to extract.</param>
            <param name="offset">The position of the value.</param>
            <param name="options">A <c>SliceOpts</c> enumeration value.
            <para>If the value is <c>null</c>, <see cref="F:TypeHelp.SliceOpts.None"/> will be substituted, resulting in the default options:</para>
            <list type="bullet">
            <item><description><paramref name="data"/> is in Network Byte Order (NBO), a.k.a., big-endian.</description></item>
            <item><description><paramref name="offset"/> is locked, data MAY be truncated.</description></item>
            </list>
            </param>
            <exception cref="T:System.InvalidOperationException"></exception>
            <remarks>If the <see cref="F:TypeHelp.SliceOpts.StrictLength"/> flag is set and the <paramref name="length"/> parameter is out of bounds, or the <see cref="F:TypeHelp.SliceOpts.StrictOffset"/> flag is set and the <paramref name="offset"/> parameter is out of bounds, a <exception cref="T:System.TypeInitializationException"/> with an inner <exception cref="T:System.InvalidOperationException"/> will be thrown.</remarks>
        </member>
        <member name="M:TypeHelp.Slice.#ctor(System.Byte[],System.TypeCode,System.Int32,System.Nullable{TypeHelp.SliceOpts})">
            <summary>
            Create a <c>Slice</c> using the selected <see cref="T:System.TypeCode"/> <paramref name="typeCode"/>, <paramref name="offset"/> and selected <see cref="T:TypeHelp.SliceOpts"/>.
            <para>If the <paramref name="typeCode"/> is <see cref="F:System.TypeCode.Object"/>, a <see cref="T:System.Numerics.BigInteger"/> will be assumed, using the equivalent (<seealso cref="F:TypeHelp.TypeCoex.BigInteger"/>).</para>
            </summary>
            <param name="data"></param>
            <param name="typeCode">For allowable values, see the <see cref="P:TypeHelp.Slice.TypeCode"/> Property.</param>
            <param name="offset">The position of the value.</param>
            <param name="options">A <c>SliceOpts</c> enumeration value.
            <para>If the value is <c>null</c>, <see cref="F:TypeHelp.SliceOpts.None"/> will be substituted, resulting in the default options:</para>
            <list type="bullet">
            <item><description><paramref name="data"/> is in Network Byte Order (NBO), a.k.a., big-endian.</description></item>
            <item><description><paramref name="offset"/> is locked, data MAY be truncated.</description></item>
            </list>
            </param>
            <exception cref="T:System.InvalidOperationException"></exception>
            <remarks>
            If the <see cref="F:TypeHelp.SliceOpts.StrictLength"/> flag is set and the <paramref name="typeCode"/> parameter is undefined, the <see cref="P:TypeHelp.Slice.TypeCoex"/> Property will be <see cref="F:TypeHelp.TypeCoex.Nullity"/>.
            <para>
            If the <see cref="F:TypeHelp.SliceOpts.StrictOffset"/> flag is set and the <paramref name="offset"/> parameter is out of bounds, a <exception cref="T:System.TypeInitializationException"/> with an inner <exception cref="T:System.InvalidOperationException"/> will be thrown.
            </para>
            </remarks>
        </member>
        <member name="M:TypeHelp.Slice.#ctor(System.Byte[],TypeHelp.TypeCoex,System.Int32,System.Nullable{TypeHelp.SliceOpts})">
            <summary>
            Create a <c>Slice</c> using the selected <c>TypeCoex</c>, offset and selected <c>SliceOpts</c>.
            </summary>
            <param name="data"></param>
            <param name="typeCoex">For allowable values, see the <see cref="P:TypeHelp.Slice.TypeCoex"/> Property.</param>
            <param name="offset">The position of the value.</param>
            <param name="options">A <c>SliceOpts</c> enumeration value.
            <para>If the value is <c>null</c>, <see cref="F:TypeHelp.SliceOpts.None"/> will be substituted, resulting in the default options:</para>
            <list type="bullet">
            <item><description><paramref name="data"/> is in Network Byte Order (NBO), a.k.a., big-endian.</description></item>
            <item><description><paramref name="offset"/> is locked, data MAY be truncated.</description></item>
            </list>
            </param>
            <exception cref="T:System.InvalidOperationException"></exception>
            <remarks>If the <see cref="F:TypeHelp.SliceOpts.StrictLength"/> flag is set and the length parameter is out of bounds, or the <see cref="F:TypeHelp.SliceOpts.StrictOffset"/> flag is set and the offset parameter is out of bounds, a <exception cref="T:System.TypeInitializationException"/> with an inner <exception cref="T:System.InvalidOperationException"/> will be thrown.</remarks>
        </member>
        <member name="F:TypeHelp.Slice.Defaults">
            <summary>
            The <see cref="T:TypeHelp.SliceOpts"/> <see cref="F:TypeHelp.SliceOpts.None"/> value (0).
            </summary>
        </member>
        <member name="F:TypeHelp.Slice.Locked">
            <summary>
            A bitwise OR of the <see cref="T:TypeHelp.SliceOpts"/> <see cref="F:TypeHelp.SliceOpts.LockedLength"/> and <see cref="F:TypeHelp.SliceOpts.LockUnsigned"/> flags.
            </summary>
        </member>
        <member name="F:TypeHelp.Slice.LockLittleEndian">
            <summary>
            A bitwise OR of the <see cref="T:TypeHelp.SliceOpts"/> <see cref="F:TypeHelp.SliceOpts.LittleEndian"/>, <see cref="F:TypeHelp.SliceOpts.LockedLength"/> and <see cref="F:TypeHelp.SliceOpts.LockUnsigned"/> flags.
            </summary>
        </member>
        <member name="F:TypeHelp.Slice.Strict">
            <summary>
            A bitwise OR of the <see cref="T:TypeHelp.SliceOpts"/> <see cref="F:TypeHelp.SliceOpts.StrictLength"/> and <see cref="F:TypeHelp.SliceOpts.StrictOffset"/> flags.
            </summary>
        </member>
        <member name="P:TypeHelp.Slice.AllowSigned">
            <summary>
            <c>true</c> if the <see cref="F:TypeHelp.SliceOpts.LockUnsigned"/> flag is not set, otherwise <c>false</c>.
            </summary>
        </member>
        <member name="P:TypeHelp.Slice.Data">
            <summary>
            A copy of the extracted byte array in big-endian order.
            <para>If the <see cref="P:TypeHelp.Slice.AllowSigned"/> Property is <c>false</c> and the <see cref="P:TypeHelp.Slice.HighBit"/> Property is <c>true</c>, an additional zero-value byte will be present in the high-order (first) byte of the returned big-endian array.</para>
            </summary>
        </member>
        <member name="P:TypeHelp.Slice.HighBit">
            <summary>
            The value is <c>true</c> if the first (big-endian normalized) data byte has the high-order bit set, otherwise <c>false</c>.
            </summary>
        </member>
        <member name="P:TypeHelp.Slice.IsEmpty">
            <summary>
            The value is <c>true</c> if the <see cref="P:TypeHelp.Slice.Data"/> Property length is zero, otherwise <c>false</c>.
            </summary>
        </member>
        <member name="P:TypeHelp.Slice.IsExact">
            <summary>
            The value is <c>true</c> if <see cref="P:TypeHelp.Slice.Length"/> or <seealso cref="P:TypeHelp.Slice.Offset"/> were not modified during initialization, else <c>false</c>.
            </summary>
        </member>
        <member name="P:TypeHelp.Slice.IsLittleEndian">
            <summary>
            The value is <c>true</c> if the <see cref="F:TypeHelp.SliceOpts.LittleEndian"/> flag is set, indicating the <see cref="P:TypeHelp.Slice.Data"/> Property byte order is the inverse of that extracted from the data provided to the constructor, otherwise <c>false</c>.
            </summary>
        </member>
        <member name="P:TypeHelp.Slice.IsSigned">
            <summary>
            The value is<c>true</c> if the <see cref="P:TypeHelp.Slice.HighBit"/> Property is true and the <see cref="F:TypeHelp.SliceOpts.LockUnsigned"/> flag is set, otherwise <c>false</c>.
            </summary>
        </member>
        <member name="P:TypeHelp.Slice.IsUnsigned">
            <summary>
            The value is<c>true</c> if the <see cref="P:TypeHelp.Slice.HighBit"/> Property is true and the <see cref="F:TypeHelp.SliceOpts.LockUnsigned"/> flag is set, otherwise <c>false</c>.
            </summary>
        </member>
        <member name="P:TypeHelp.Slice.Length">
            <summary>
            The length of the byte array.
            </summary>
        </member>
        <member name="P:TypeHelp.Slice.LengthDelta">
            <summary>
            The change, if any, made to the <see cref="P:TypeHelp.Slice.Length"/> during initialization.
            </summary>
        </member>
        <member name="P:TypeHelp.Slice.Offset">
            <summary>
            The position of the data in the input array.
            </summary>
        </member>
        <member name="P:TypeHelp.Slice.OffsetDelta">
            <summary>
            The change, if any, made to the <see cref="P:TypeHelp.Slice.Offset"/> during initialization.
            </summary>
        </member>
        <member name="P:TypeHelp.Slice.Options">
            <summary>
            The <c>SliceOpts</c> provided to the constructor.
            </summary>
        </member>
        <member name="P:TypeHelp.Slice.TypeCode">
            <summary>
            The <see cref="T:System.TypeCode"/> of the extracted data. This will be one of the following:
            <code>
             TypeCode.Boolean
             TypeCode.Byte     TypeCode.Char     TypeCode.DateTime
             TypeCode.DBNull   TypeCode.Decimal  TypeCode.Double
             TypeCode.Int16    TypeCode.Int32    TypeCode.Int64
             TypeCode.Object   TypeCode.SByte    TypeCode.Single
             TypeCode.UInt16   TypeCode.UInt32   TypeCode.UInt64&#160;
            </code>
            </summary>
            <remarks>
            The value is derived as follows:
            <code>
               public TypeCode TypeCode {
                  get { return Type.GetTypeCode(this.Value.GetType()); }
               }
            </code>
            </remarks>
        </member>
        <member name="P:TypeHelp.Slice.TypeCoex">
            <summary>
            The <see cref="P:TypeHelp.Slice.TypeCoex"/> of the extracted value. This will be one of the following:
            <code>
             TypeCoex.BigInteger  TypeCoex.Boolean  TypeCoex.Byte
             TypeCoex.Char        TypeCoex.Complex  TypeCoex.DateTime
             TypeCoex.DBNull      TypeCoex.Decimal  TypeCoex.Double
             TypeCoex.Int16       TypeCoex.Int32    TypeCoex.Int64
             TypeCoex.Object      TypeCoex.SByte    TypeCoex.Single
             TypeCoex.UInt16      TypeCoex.UInt32   TypeCoex.UInt64&#160;
            </code>
            </summary>
        </member>
        <member name="P:TypeHelp.Slice.TypeOf">
            <summary>
            The <see cref="T:System.Type"/> of the extracted value.
            </summary>
        </member>
        <member name="P:TypeHelp.Slice.Value">
            <summary>
            The value will be one of the following types:
            <code>
             System.Boolean   System.Byte    System.Char
             System.DateTime  System.DBNull  System.Decimal
             System.Double    System.Int16   System.Int32
             System.Int64     System.SByte   System.Single
             System.UInt16    System.UInt32  System.UInt64
             System.Numerics.BigInteger
             System.Numerics.Complex
             TypeHelp.Nullity&#160;
             </code>
            </summary>
        </member>
        <member name="M:TypeHelp.Slice.GetData(System.Boolean)">
            <summary>
            Gets A clone of the extracted byte array in big-endian or as presented to the constructor.
            </summary>
            <param name="original">Controls the order of the returned data.
            <para>If <c>true</c> the data is returned in the original order, which is a reverse of the data if the <see cref="P:TypeHelp.Slice.IsLittleEndian"/> Property is true; otherwise the data is in big-endian order.</para>
            <para>If <c>false</c>, the <see cref="P:TypeHelp.Slice.AllowSigned"/> Property is <c>false</c> and the <see cref="P:TypeHelp.Slice.HighBit"/> Property is <c>true</c>, an additional zero-length byte will be present in the high-order (first) byte of the returned byte array.</para>
            </param>
            <returns></returns>
        </member>
        <member name="M:TypeHelp.Slice.IsType(System.TypeCode)">
            <summary>
            Test whether or not this instance has the specified <c>TypeCode</c> Property length.
            </summary>
            <param name="typeCode">The <c>TypeCode</c> to test.</param>
            <returns><c>true</c> if the <paramref name="typeCode"/> parameter matches the <see cref="P:TypeHelp.Slice.TypeCode"/> Property.</returns>
        </member>
        <member name="M:TypeHelp.Slice.IsType(TypeHelp.TypeCoex)">
            <summary>
            Test whether or not this instance has the specified <c>TypeCoex</c> Property length.
            </summary>
            <param name="typeCoex">The <c>TypeCoex</c> to test.</param>
            <returns><c>true</c> if the <paramref name="typeCoex"/> parameter matches the <see cref="P:TypeHelp.Slice.TypeCoex"/> Property.</returns>
        </member>
        <member name="M:TypeHelp.Slice.HasOptions(TypeHelp.SliceOpts)">
            <summary>
            Test whether or not this instance has a given <c>SliceOpts</c> flag, or flags set.
            </summary>
            <param name="option">The option flag or flags to check.</param>
            <returns><c>true</c> if any flag is set in both Options and the <paramref name="option"/> argument, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:TypeHelp.Slice.HasOptions(System.Boolean,TypeHelp.SliceOpts)">
            <summary>
            Test whether or not this instance has the <c>SliceOpts</c> flag, any flag or all flags set.
            </summary>
            <param name="exact">Specifies whether or not to check all options.</param>
            <param name="option">The option flags to check.</param>
            <returns><c>true</c> if the required flag or flags are set in both the <see cref="P:TypeHelp.Slice.Options"/> Property and the <c>option</c> argument, otherwise <c>false</c>. If exact is true, all flags in the <c>option</c> argument MUST be set in the <c>Options</c> Property.</returns>
        </member>
        <member name="M:TypeHelp.Slice.Initialize(System.Byte[],System.Int32,System.Int32)">
            <summary>
            All parameters MUST be as provided to the constructor.
            </summary>
            <param name="data">An array of bytes.</param>
            <param name="length">The number of bytes to extract from the data.</param>
            <param name="offset">The starting offset within the data.</param>
            <returns><exception cref="T:System.InvalidOperationException"> If either the <see cref="F:TypeHelp.SliceOpts.StrictLength"/> flag is set and the length parameter is out of bounds, or the <see cref="F:TypeHelp.SliceOpts.StrictOffset"/> flag is set and the offset parameter is out of bounds, otherwise <c>null</c>.</exception></returns>
        </member>
        <member name="M:TypeHelp.Slice.IntializeData(System.Byte[])">
            <summary>
            Copy the selected byte array elements, testing for the <see cref="F:TypeHelp.SliceOpts.LittleEndian"/> option.
            </summary>
            <param name="bytes">The source byte array.</param>
        </member>
        <member name="M:TypeHelp.Slice.InitializeLength(System.Int32,System.Int32)">
            <summary>
            Initializes the length, using the data length and data.Length value.
            </summary>
            <param name="size">MUST be the length of the data provided to the constructor.</param>
            <param name="coex">The <c>TypeCode</c> or <c>TypeCoex</c>.</param>
            <returns>An integer within [0, max(dataLength, data.Length)]</returns>
        </member>
        <member name="M:TypeHelp.Slice.InitializeResult">
            <summary>
            Obtain an <c>Exception</c>, or <c>null</c> if no errors are found.
            </summary>
            <returns><exception cref="T:System.InvalidOperationException"> If either the <see cref="F:TypeHelp.SliceOpts.StrictLength"/> flag is set and the length parameter is out of bounds, or the <see cref="F:TypeHelp.SliceOpts.StrictOffset"/> flag is set and the offset parameter is out of bounds, otherwise <c>null</c>.</exception></returns>
        </member>
        <member name="M:TypeHelp.Slice.InitializeValue">
            <summary>
            Set the length per provided data and signing options, storing the original data in the private <see cref="F:TypeHelp.Slice.orig"/> field.
            </summary>
        </member>
        <member name="M:TypeHelp.TypeParser.GetTypeCoex(System.Object)">
            <summary>
            Get the <c>TypeCoex</c> for an <c>object</c>.
            </summary>
            <param name="value">The <c>object</c> to test, which may be null. <see cref="F:System.TypeCode.Empty"/>.<para><seealso cref="F:TypeHelp.TypeCoex.Empty"/></para>.</param>
            <returns></returns>
        </member>
        <member name="T:TypeHelp.TypeCoex">
            <summary>
            The DataType typeCoex.
            </summary>
        </member>
        <member name="T:TypeHelp.TypedStr">
            <summary>
            The typed str.
            </summary>
        </member>
        <member name="T:TypeHelp.TCO">
            <summary>
            TCO Enumeration
            <para>Flags defining status and options to parse
            <see cref="T:System.Type"/> and values for
            <see cref="T:System.TypeCode"/> and <seealso cref="T:TypeHelp.TypeCoex"/>
            enmeration values.
            </para>
            </summary>
        </member>
        <member name="T:TypeHelp.TCF">
            <summary>
            The t c f.
            </summary>
        </member>
        <member name="T:TypeHelp.TCSizes">
            <summary>
            The t c sizes.
            </summary>
        </member>
        <member name="T:TypeHelp.CPG">
            <summary>
            The c p g.
            </summary>
        </member>
        <member name="T:TypeHelp.CPGI">
            <summary>
            The c p g i.
            </summary>
        </member>
        <member name="T:TypeHelp.UCP">
            <summary>
            The u c p.
            </summary>
        </member>
        <member name="T:TypeHelp.UCPF">
            <summary>
            The u c p f.
            </summary>
        </member>
        <member name="T:TypeHelp.CharType">
            <summary>
            The char DataType.
            </summary>
        </member>
        <member name="T:TypeHelp.UCat">
            <summary>
            The u cat.
            </summary>
        </member>
        <member name="T:TypeHelp.CmpOp">
            <summary>
            The cmp op.
            </summary>
        </member>
        <member name="T:TypeHelp.CmpUC">
            <summary>
            The cmp u c.
            </summary>
        </member>
        <member name="T:TypeHelp.UCGeneralUse">
            <summary>
            The u c general use.
            </summary>
        </member>
        <member name="T:TypeHelp.UCGreek">
            <summary>
            The u c greek.
            </summary>
        </member>
        <member name="T:TypeHelp.UCMath">
            <summary>
            The u c math.
            </summary>
        </member>
        <member name="T:TypeHelp.ZeroWidthChars">
            <summary>
            The zero width chars.
            </summary>
        </member>
        <member name="T:TypeHelp.ZeroWidthSpaces">
            <summary>
            The zero width spaces.
            </summary>
        </member>
        <member name="T:TypeHelp.UCPField">
            <summary>
            The u c p field.
            </summary>
        </member>
        <member name="T:TypeHelp.UuidEpoch">
             <summary>
             UuidEpoch Enum
            
             <list DataType="table">
               <listheader>
                  <term>Epoch</term><term>Property</term><description>Value</description>
               </listheader>
               <item>
                  <term>Gregorian</term><term>RFC 1123</term><term>Mon, 01 Jan 0001 00:00:00 GMT</term>
               </item>
               <item>
                  <term></term><term>ISO 8601</term><term>0001-00-01T12:00:00</term>
               </item>
               <item>
                  <term></term><term>Ticks</term><term>0</term>
               </item>
               <item>
                  <term></term><term>Precision</term><term>100-nanosecond</term>
               </item>
               <item>
                  <term>Gregorian</term><term>RFC 1123</term><term>Thu, 01 Jan 1970 00:00:00 GMT</term>
               </item>
               <item>
                  <term></term><term>ISO 8601</term><term>1970-00-01T12:00:00Z</term>
               </item>
               <item>
                  <term>(no leap seconds)</term><term>Ticks</term><term>621355968000000000</term>
               </item>
               <item>
                  <term></term><term>Precision</term><term>millisecond</term>
               </item>
             </list>
             <para>Gregorian:</para>
             <para>   RFC 1123: Mon, 01 Jan 0001 00:00:00 GMT</para>
             <para>   ISO 8601: 0001-00-01T12:00:00Z</para>
             <para>      Ticks: 0</para>
             <para>  Precision: 100-nanosecond</para>
             <para>Posix:</para>
             <para>   RFC 1123: Thu, 01 Jan 1970 00:00:00 GMT</para>
             <para>   ISO 8601: 1970-00-01T12:00:00Z</para>
             <para>      Ticks: 621355968000000000 (no leap seconds)</para>
             <para>  Precision: millisecond</para>
             </summary>
        </member>
        <member name="F:TypeHelp.UuidEpoch.None">
            <summary>
            None, for non-CommonTime based Uuids
            </summary>
        </member>
        <member name="F:TypeHelp.UuidEpoch.Posix">
            <summary>
            Posix/Unix millisecond precision, no leap seconds.
            </summary>
        </member>
        <member name="F:TypeHelp.UuidEpoch.Common">
            <summary>
            Common era - Gregorian epoch 100-nanosecond precision
            </summary>
        </member>
        <member name="T:TypeHelp.UuidField">
            <summary>
            UuidField Enum
            </summary>
        </member>
        <member name="T:TypeHelp.UuidFormat">
            <summary>
            UuidFormat Enum
            </summary>
        </member>
        <member name="T:TypeHelp.UuidVariant">
            <summary>
            UuidVariant Enum
            </summary>
        </member>
        <member name="T:TypeHelp.UuidVersion">
            <summary>
            UuidVersion Enum
            <para>
            Provides a friendly-name list of UUID versions, using defined integer values.
            Version <see href="https://www.rfc-editor.org/rfc/rfc4122#section-4.1.3"/>
            </para>
            New UUID Formats
            <seealso href="https://www.ietf.org/archive/id/draft-peabody-dispatch-new-uuid-uuidFormat-04.html"/>
            </summary>
            <remarks>
            <list DataType="number">
              <item>
                 <term>RFC 4122</term>
                 <description>
                 <para>A Universally Unique IDentifier (UUID) URN Namespace</para>
                 4.1.3.  Version
                 <see href="https://www.rfc-editor.org/rfc/rfc4122"/>
                 </description>
              </item>
              <item>
              <term>New UUID Formats</term>
              <description>
                 This document presents new Universally Unique Identifier (UUID) formats for use in modern applications and databases.
                 <seealso href="https://www.ietf.org/archive/id/draft-peabody-dispatch-new-uuid-uuidFormat-04.html"/>
              </description>
              </item>
            </list>
            <list DataType="table">
              <listheader>
                 <term>Field</term>
                 <description>Description</description>
              </listheader>
              <item>
                 <term><see cref="F:TypeHelp.UuidVersion.Unknown"/></term>
                 <description>
                    <usingOffset><c>Unknown = 0</c><para>Indicates an invalid UUID.</para></usingOffset>
                 </description>
              </item>
              <item>
                 <term><see cref="F:TypeHelp.UuidVersion.TimeGregorian"/></term>
                 <description>
                 <usingOffset><c>TimeGregorian = 1</c>
                 <para>CommonTime-based Gregorian epoch UUID with 100-nanosecond granularity on a 60-bit usingOffset.</para>
                 </usingOffset>
                 </description>
              </item>
              <item>
                 <term><see cref="F:TypeHelp.UuidVersion.DCESecurity"/></term>
                 <description>
                 <usingOffset><c>DCESecurity = 2</c>
                 <para>The Distributed Computing Environment (DCE) Security version, with embedded Posix UIDs.</para>
                 </usingOffset>
                 </description>
              </item>
              <item>
                 <term><see cref="F:TypeHelp.UuidVersion.NameBasedMD5"/></term>
                 <description>
                 <usingOffset><c>NameBasedMD5 = 3</c>
                 <para>name-based UUIDs that use MD5 hashing.</para>
                 </usingOffset>
                 </description>
              </item>
              <item>
                 <term><see cref="F:TypeHelp.UuidVersion.PseudoRandom"/></term>
                 <description>
                 <usingOffset><c>PseudoRandom = 4</c>
                 <para>Randomly or pseudo-randomly generated UUIDs.</para>
                 </usingOffset>
                 </description>
              </item>
              <item>
                 <term><see cref="F:TypeHelp.UuidVersion.NameBasedSHA1"/></term>
                 <description>
                 <usingOffset><c>NameBasedSHA1 = 5</c>
                 <para>name-based UUIDs that use SHA-1 hashing</para>
                 </usingOffset>
                 </description>
              </item>
              <item>
                 <term><see cref="F:TypeHelp.UuidVersion.TimeReordered"/></term>
                 <description>
                 <usingOffset><c>TimeReordered = 6</c>
                 <para>CommonTime-based Reordered UUIDs <see cref="F:TypeHelp.UuidVersion.TimeGregorian"/>.</para>
                 </usingOffset>
                 </description>
              </item>
              <item>
                 <term><see cref="F:TypeHelp.UuidVersion.TimePosixEpoch"/></term>
                 <description>
                 <usingOffset><c>TimePosixEpoch = 7</c>
                 <para>CommonTime-based Posix epoch UUIDs with millisecond granularity on a 48-bit usingOffset.</para>
                 </usingOffset>
                 </description>
              </item>
              <item>
                 <term><see cref="F:TypeHelp.UuidVersion.CustomFormats"/></term>
                 <description
                 ><usingOffset>
                 <c>CustomFormats = 8</c>
                 <para>Reserved for custom UUID formats.</para>
                 </usingOffset>
                 </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="F:TypeHelp.UuidVersion.Unknown">
            <usingOffset><c>Unknown = 0</c>
            <para>Indicates an invalid UUID.</para>
            </usingOffset>
        </member>
        <member name="F:TypeHelp.UuidVersion.TimeGregorian">
            <usingOffset><c>TimeGregorian = 1</c>
            <para>CommonTime-based Gregorian epoch UUID with 100-nanosecond granularity on a 60-bit usingOffset.</para>
            </usingOffset>
        </member>
        <member name="F:TypeHelp.UuidVersion.DCESecurity">
            <usingOffset><c>DCESecurity = 2</c>
            <para>The DCE Security version, with embedded Posix UIDs.</para>
            </usingOffset>
        </member>
        <member name="F:TypeHelp.UuidVersion.NameBasedMD5">
            <usingOffset><c>NameBasedMD5 = 3</c>
            <para>name-based UUIDs that use MD5 hashing.</para>
            </usingOffset>
        </member>
        <member name="F:TypeHelp.UuidVersion.PseudoRandom">
            <usingOffset><c>PseudoRandom = 4</c>
            <para>Randomly or pseudo-randomly generated UUIDs.</para>
            </usingOffset>
        </member>
        <member name="F:TypeHelp.UuidVersion.NameBasedSHA1">
            <usingOffset><c>NameBasedSHA1 = 5</c>
            <para>name-based UUIDs that use SHA-1 hashing.</para>
            </usingOffset>
        </member>
        <member name="F:TypeHelp.UuidVersion.TimeReordered">
            <usingOffset><c>TimeReordered = 6</c>
            <para>CommonTime-based Reordered UUIDs <see cref="F:TypeHelp.UuidVersion.TimeGregorian"/>.</para>
            </usingOffset>
        </member>
        <member name="F:TypeHelp.UuidVersion.TimePosixEpoch">
            <usingOffset><c>TimePosixEpoch = 7</c>
            <para>CommonTime-based Posix epoch UUIDs with millisecond granularity on a 48-bit usingOffset.</para>
            </usingOffset>
        </member>
        <member name="F:TypeHelp.UuidVersion.CustomFormats">
            <usingOffset><c>CustomFormats = 8</c>
            <para>Reserved for custom UUID formats.</para>
            </usingOffset>
        </member>
        <member name="T:TypeHelp.Uuid">
            <summary>
            The uuid.
            </summary>
        </member>
        <member name="F:TypeHelp.Uuid.Data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="F:TypeHelp.Uuid.IsMaxUuid">
            <summary>
            props maxValue uuid.
            </summary>
        </member>
        <member name="F:TypeHelp.Uuid.IsNilUuid">
            <summary>
            props nil uuid.
            </summary>
        </member>
        <member name="F:TypeHelp.Uuid.IsStrict">
            <summary>
            props strict.
            </summary>
        </member>
        <member name="F:TypeHelp.Uuid.IsValid">
            <summary>
            props valid.
            </summary>
        </member>
        <member name="F:TypeHelp.Uuid.Variant">
            <summary>
            The variant.
            </summary>
        </member>
        <member name="F:TypeHelp.Uuid.VariantInfo">
            <summary>
            The variant info.
            </summary>
        </member>
        <member name="F:TypeHelp.Uuid.Version">
            <summary>
            The Version.
            </summary>
        </member>
        <member name="F:TypeHelp.Uuid.VersionInfo">
            <summary>
            The Version info.
            </summary>
        </member>
        <member name="P:TypeHelp.Uuid.TimeStamp">
            <summary>
            TimeStamp
            </summary>
            <returns>UTC Ticks for CommonTime-based Uuids (V1,6,7), or 0</returns>
        </member>
        <member name="M:TypeHelp.Uuid.ToString(System.String)">
            <summary>
            ToString(string uuidFormat)
            </summary>
            <param name="format">One character from [DBPNXbc] or cn, {n:1,2,4,8,16}</param>
            <note DataType="caution">For the [DBPNX] formats
            <see href="https://learn.microsoft.com/en-us/dotnet/api/system.guid.tostring?view=netframework-4.8.1"/>
            Guid.ToString Method (System) | Microsoft Learn
            </note>
            <returns>A formatted uuid.
            <para>The b uuidFormat is for binary.</para>
            <para>The c uuidFormat</para>
            </returns>
            <exception cref="T:System.InvalidOperationException">TODO</exception>
        </member>
        <member name="M:TypeHelp.Uuid.ToString(TypeHelp.UuidFormat)">
            <summary>
            ToString(UuidFormat uuidFormat)
            </summary>
            <param name="uuidFormat">The uuidFormat.</param>
            <returns>A formatted uuid.</returns>
        </member>
        <member name="M:TypeHelp.Uuid.ToString(TypeHelp.UuidFormat,System.Nullable{System.Int32})">
            <summary>
            ToString(UuidFormat uuidFormat, int usingLength)
            </summary>
            <param name="uuidFormat">The uuidFormat.</param>
            <param name="size">The usingLength.</param>
            <returns>A formatted uuid.</returns>
        </member>
        <member name="M:TypeHelp.Uuid.#ctor(System.Boolean,TypeHelp.UuidVersion,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:TypeHelp.Uuid"/> class.
            </summary>
            <param name="strict">bool</param>
            <param name="version">UuidVersion</param>
            <param name="data">byte[]</param>
            <exception cref="T:System.InvalidOperationException">Thrown if data or version is invalid</exception>
        </member>
        <member name="F:TypeHelp.Uuid.field_info_set">
            <summary>
            The field info set.
            </summary>
        </member>
        <member name="F:TypeHelp.Uuid.field_size">
            <summary>
            The field count.
            </summary>
        </member>
        <member name="M:TypeHelp.Uuid.GetBigInteger(System.Byte[],System.Int32,System.Int32)">
            <summary>
            GetBigInteger
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns> A BigInteger usingOffset.</returns>
        </member>
        <member name="M:TypeHelp.Uuid.GetUInt16(System.Byte[],System.Int32)">
            <summary>
            GetUInt16
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <returns> A UInt16 usingOffset.</returns>
        </member>
        <member name="M:TypeHelp.Uuid.GetUInt32(System.Byte[],System.Int32)">
            <summary>
            GetUInt32
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <returns> A UInt32 usingOffset.</returns>
        </member>
        <member name="M:TypeHelp.Uuid.GetUInt64(System.Byte[],System.Int32)">
            <summary>
            GetUInt64
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <returns> A UInt64 usingOffset.</returns>
        </member>
        <member name="T:TypeHelp.UuidRfc">
            <summary>
            UuidRfc
            </summary>
        </member>
        <member name="F:TypeHelp.UuidRfc.ClockSequence">
            <summary>
            The clock sequence.
            </summary>
        </member>
        <member name="F:TypeHelp.UuidRfc.ClockSequenceInfo">
            <summary>
            The clock sequence info.
            </summary>
        </member>
        <member name="F:TypeHelp.UuidRfc.ClockSequenceSize">
            <summary>
            The clock sequence count.
            </summary>
        </member>
        <member name="F:TypeHelp.UuidRfc.Node">
            <summary>
            The node.
            </summary>
        </member>
        <member name="F:TypeHelp.UuidRfc.NodeInfo">
            <summary>
            The node info.
            </summary>
        </member>
        <member name="F:TypeHelp.UuidRfc.Time">
            <summary>
            The time.
            </summary>
        </member>
        <member name="F:TypeHelp.UuidRfc.TimeInfo">
            <summary>
            CommonTime info.
            </summary>
        </member>
        <member name="M:TypeHelp.UuidRfc.#ctor(System.Boolean,TypeHelp.UuidVersion,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:TypeHelp.UuidRfc"/> class.
            </summary>
            <param name="strict">bool</param>
            <param name="version">UuidVersion</param>
            <param name="data">byte[]</param>
        </member>
        <member name="F:TypeHelp.FieldInfo.Bytes">
            <summary>
            List&lt;byte&gt; Bytes
            </summary>
        </member>
        <member name="F:TypeHelp.FieldInfo.Field">
            <summary>
            UuidField Field
            </summary>
        </member>
        <member name="F:TypeHelp.FieldInfo.Value">
            <summary>
            long HasValue
            </summary>
        </member>
        <member name="M:TypeHelp.FieldInfo.#ctor(TypeHelp.UuidField,System.Collections.Generic.List{System.Byte},System.Int64)">
            <summary>
            FieldInfo
            </summary>
            <param name="field"></param>
            <param name="bytes"></param>
            <param name="value"></param>
        </member>
        <member name="T:TypeHelp.UuidParser">
            <summary>
            UuidParser
            </summary>
        </member>
        <member name="F:TypeHelp.UuidParser.UuidFormatChars">
            <summary>
            UuidFormatChars
            </summary>
        </member>
        <member name="M:TypeHelp.UuidParser.InvalidVersionMessage(System.Int64,TypeHelp.UuidVersion)">
            <summary>
            InvalidVersionMessage
            </summary>
            <param name="version">the version to check</param>
            <param name="expected">the expected version</param>
            <returns>formatted error Text.</returns>
        </member>
        <member name="T:TypeHelp.UuidV1">
            <summary>
            UuidV1.
            </summary>
        </member>
        <member name="M:TypeHelp.UuidV1.#ctor(System.Boolean,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:TypeHelp.UuidV1"/> class.
            </summary>
            <param name="strict">If true, strict.</param>
            <param name="data">The data.</param>
        </member>
        <member name="T:TypeHelp.UuidV2">
            <summary>
            UuidV2.
            </summary>
        </member>
        <member name="M:TypeHelp.UuidV2.#ctor(System.Boolean,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:TypeHelp.UuidV2"/> class.
            </summary>
            <param name="strict">If true, strict.</param>
            <param name="data">The data.</param>
        </member>
        <member name="T:TypeHelp.UuidV3">
            <summary>
            UuidV3.
            </summary>
        </member>
        <member name="M:TypeHelp.UuidV3.#ctor(System.Boolean,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:TypeHelp.UuidV3"/> class.
            </summary>
            <param name="strict">If true, strict.</param>
            <param name="data">The data.</param>
        </member>
        <member name="T:TypeHelp.UuidV4">
            <summary>
            UuidV4.
            </summary>
        </member>
        <member name="M:TypeHelp.UuidV4.#ctor(System.Boolean,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:TypeHelp.UuidV4"/> class.
            </summary>
            <param name="strict">If true, strict.</param>
            <param name="data">The data.</param>
        </member>
        <member name="T:TypeHelp.UuidV5">
            <summary>
            UuidV5.
            </summary>
        </member>
        <member name="M:TypeHelp.UuidV5.#ctor(System.Boolean,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:TypeHelp.UuidV5"/> class.
            </summary>
            <param name="strict">If true, strict.</param>
            <param name="data">The data.</param>
        </member>
        <member name="T:TypeHelp.UuidV6">
            <summary>
            UuidV6.
            </summary>
        </member>
        <member name="M:TypeHelp.UuidV6.#ctor(System.Boolean,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:TypeHelp.UuidV6"/> class.
            </summary>
            <param name="strict">If true, strict.</param>
            <param name="data">The data.</param>
        </member>
        <member name="T:TypeHelp.UuidV7">
            <summary>
            UuidV7.
            </summary>
        </member>
        <member name="F:TypeHelp.UuidV7.UnixTime">
            <summary>
            The unix time.
            </summary>
        </member>
        <member name="F:TypeHelp.UuidV7.UnixTimeInfo">
            <summary>
            The unix time info.
            </summary>
        </member>
        <member name="F:TypeHelp.UuidV7.RandA">
            <summary>
            The rand a.
            </summary>
        </member>
        <member name="F:TypeHelp.UuidV7.RandAInfo">
            <summary>
            The rand a info.
            </summary>
        </member>
        <member name="F:TypeHelp.UuidV7.RandB">
            <summary>
            The rand b.
            </summary>
        </member>
        <member name="F:TypeHelp.UuidV7.RandBInfo">
            <summary>
            The rand b info.
            </summary>
        </member>
        <member name="M:TypeHelp.UuidV7.#ctor(System.Boolean,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:TypeHelp.UuidV7"/> class.
            </summary>
            <param name="strict">If true, strict.</param>
            <param name="data">The data.</param>
        </member>
        <member name="T:TypeHelp.UuidV8">
            <summary>
            UuidV8.
            </summary>
        </member>
        <member name="F:TypeHelp.UuidV8.CustomA">
            <summary>
            The custom a.
            </summary>
        </member>
        <member name="F:TypeHelp.UuidV8.CustomAInfo">
            <summary>
            The custom a info.
            </summary>
        </member>
        <member name="F:TypeHelp.UuidV8.CustomB">
            <summary>
            The custom b.
            </summary>
        </member>
        <member name="F:TypeHelp.UuidV8.CustomBInfo">
            <summary>
            The custom b info.
            </summary>
        </member>
        <member name="F:TypeHelp.UuidV8.CustomC">
            <summary>
            The custom c.
            </summary>
        </member>
        <member name="F:TypeHelp.UuidV8.CustomCInfo">
            <summary>
            The custom c info.
            </summary>
        </member>
        <member name="M:TypeHelp.UuidV8.#ctor(System.Boolean,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:TypeHelp.UuidV8"/> class.
            </summary>
            <param name="strict">If true, strict.</param>
            <param name="data">The data.</param>
        </member>
    </members>
</doc>
